----------------------------------------------------------------
-- Company: KUL - rnd embed - Beats N Bytes
-- Engineer: Wout Lyen
-- Project Name: Blendinator
----------------------------------------------------------------
-- -------------------------------------------------------------
-- 
-- File Name: volume.vhd
-- Created: 2024-11-21 00:32:27
-- 
-- Partially generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.fixed_pkg.all;

use work.axi4_audio_pkg.all;
use work.axi4_mm_filter_pkg.all;


entity volume is
  generic (
        g_coefficient_width : integer := 24;
        g_chip_scope : string := "False"
    );
  port( 
    -- clocking
    clk : in std_logic;

    -- axi mm
    axi_in_mm : in t_axi4_mm_volume;

    -- axi inputs
    axi_in_fwd : in t_axi4_audio_fwd;
    axi_in_bwd : out t_axi4_audio_bwd;

    -- axi outputs
    axi_out_fwd : out t_axi4_audio_fwd;
    axi_out_bwd : in t_axi4_audio_bwd

  );
end volume;


architecture rtl of volume is

  -------------------------------------
  -- Axi MM
  -------------------------------------
  signal axi_in_mm_1 : t_axi4_mm_volume := axi4_mm_volume_inactive;
  signal axi_in_mm_2 : t_axi4_mm_volume := axi4_mm_volume_inactive;

  -------------------------------------
  -- Gain init
  -------------------------------------
  signal gain : sfixed(g_coefficient_width -1 downto 0) := to_sfixed(0.5012, 0, -23);

  -------------------------------------
  -- Data Input
  -------------------------------------
  signal TData_stage_1                    : signed(23 downto 0) := (others => '0');  -- sfix24_En23
  signal TID_stage_1                      : std_logic_vector(c_ID_width -1 downto 0) := (others => '0');

  -------------------------------------
  -- Filter
  -------------------------------------
  -- Data
  signal TData_stage_2                    : signed(23 downto 0) := (others => '0');  -- sfix24_En23
  signal TData_stage_3                    : signed(23 downto 0) := (others => '0');  -- sfix24_En23
  signal TID_stage_2                      : std_logic_vector(c_ID_width -1 downto 0) := (others => '0');

  -- FIlters Signals
  signal gain_signed                      : signed(23 downto 0) := (others => '0');  -- sfix24_En23
  signal Product_out1                     : signed(47 downto 0) := (others => '0');  -- sfix48_En46
  signal Data_Type_Conversion_out1        : signed(23 downto 0) := (others => '0');  -- sfix24_En23

  -------------------------------------
  -- Control flow
  -------------------------------------
  signal pipe_startup : integer range 0 to 3 := 3;

   
BEGIN

  -------------------------------------
  -- Axi MM
  -------------------------------------
  axi_mm : process (clk)
  begin
    if rising_edge(clk) then
    
      axi_in_mm_1 <= axi_in_mm;
      axi_in_mm_2 <= axi_in_mm_1;

      gain <= axi_in_mm_2.channel_value;

    end if;
  end process;

  -------------------------------------
  -- Data Input
  -------------------------------------
  data_input_process : process (clk)
  begin
    if rising_edge(clk) then
      if axi_in_fwd.TValid = '1' and axi_out_bwd.TReady = '1' then
        TData_stage_1 <= signed(axi_in_fwd.TData);
        TID_stage_1 <= axi_in_fwd.TID;
      end if;
    end if;
  end process data_input_process;

  -------------------------------------
  -- Filter
  -------------------------------------
  filter_process : process (clk)
  begin
    if rising_edge(clk) then
      if axi_in_fwd.TValid = '1' and axi_out_bwd.TReady = '1' then

        -- Input Data
        TData_stage_2 <= TData_stage_1;
        TID_stage_2 <= TID_stage_1;

        -- Move Gain to Filter
        gain_signed <= signed(gain);

      end if;
    end if;
  end process filter_process;

  -- Product
  Product_out1 <= TData_stage_2 * gain_signed;

  -- Size Conversion
  Data_Type_Conversion_out1 <= Product_out1(46 DOWNTO 23);
  TData_stage_3 <= Data_Type_Conversion_out1;

  -------------------------------------
  -- Output Data
  -------------------------------------
  data_output_process : process (clk)
  begin
    if rising_edge(clk) then
      if axi_in_fwd.TValid = '1' and axi_out_bwd.TReady = '1' then

        axi_out_fwd.TData <= std_logic_vector(TData_stage_3);
        axi_out_fwd.TID   <= TID_stage_2;

      end if;
    end if;
  end process data_output_process;


  -------------------------------------
  -- Control flow
  -------------------------------------
  -- we are ready if the module behind us is ready
  axi_in_bwd.TReady <= axi_out_bwd.TReady;

  p_ctrl_flow : process (clk)
  begin
      if rising_edge(clk) then
          if axi_in_fwd.TValid = '1' and axi_out_bwd.TReady = '1' then

              if pipe_startup = 0 then
                pipe_startup <= pipe_startup;
              else
                pipe_startup <= pipe_startup - 1;
              end if;

          end if;
      end if;
  end process;


  p_valid : process (all)
  begin

      if pipe_startup = 0 then
          axi_out_fwd.TValid <= axi_in_fwd.TValid;
      else
          axi_out_fwd.TValid <= '0';
      end if;

  end process;


END rtl;