-- -------------------------------------------------------------
-- 
-- File Name: saturation_tdm.vhd
-- Created: 2024-11-21 00:32:27
-- 
-- Partially generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.fixed_pkg.all;

use work.axi4_audio_pkg.all;


entity saturation_tdm is
  generic (
        g_coefficient_width : integer := 27;
        g_chip_scope : string := "False"
    );
  port( 
    -- clocking
    clk : in std_logic;

    -- axi inputs
    axi_in_fwd : in t_axi4_audio_fwd;
    axi_in_bwd : out t_axi4_audio_bwd;

    -- axi outputs
    axi_out_fwd : out t_axi4_audio_fwd;
    axi_out_bwd : in t_axi4_audio_bwd

  );
end saturation_tdm;


architecture rtl of saturation_tdm is

  -------------------------------------
  -- Memory init
  -------------------------------------
  type t_gain_array is array (0 to 2**c_ID_width) of sfixed(g_coefficient_width -1 downto 0);
  signal gain_array : t_gain_array := (others => to_sfixed(7.9, 3, -23));

  -------------------------------------
  -- Data Input
  -------------------------------------
  signal TData_stage_1                    : signed(23 downto 0) := (others => '0');  -- sfix24_En23
  signal TID_stage_1                      : std_logic_vector(c_ID_width -1 downto 0) := (others => '0');

  -------------------------------------
  -- Fetch Coefficients & Previous Data
  -------------------------------------
  signal TData_stage_2                    : signed(23 downto 0) := (others => '0');  -- sfix24_En23
  signal TID_stage_2                      : std_logic_vector(c_ID_width -1 downto 0) := (others => '0');

  signal TID_gain                         : sfixed(g_coefficient_width -1 downto 0) := (others => '0');

  -------------------------------------
  -- Filter
  -------------------------------------
  -- Data
  signal TData_stage_3                    : signed(23 downto 0) := (others => '0');  -- sfix24_En23
  signal TData_stage_4                    : signed(23 downto 0) := (others => '0');  -- sfix24_En23
  signal TID_stage_3                      : std_logic_vector(c_ID_width -1 downto 0) := (others => '0');

  -- FIlters Signals
  signal gain_signed                      : signed(26 downto 0) := (others => '0');  -- sfix27_En23
  signal Product_out1                     : signed(50 downto 0) := (others => '0');  -- sfix51_En46
  signal dtc_out                          : signed(23 downto 0) := (others => '0');  -- sfix24_En23

  -------------------------------------
  -- Control flow
  -------------------------------------
  signal pipe_startup : integer range 0 to 4 := 4;

   
BEGIN

  -------------------------------------
  -- Data Input
  -------------------------------------
  data_input_process : process (clk)
  begin
    if rising_edge(clk) then
      if axi_in_fwd.TValid = '1' and axi_out_bwd.TReady = '1' then
        TData_stage_1 <= signed(axi_in_fwd.TData);
        TID_stage_1 <= axi_in_fwd.TID;
      end if;
    end if;
  end process data_input_process;


  -------------------------------------
  -- Fetch Coefficients & Previous Data
  -------------------------------------
  fetch_process : process (clk)
  begin
    if rising_edge(clk) then
      if axi_in_fwd.TValid = '1' and axi_out_bwd.TReady = '1' then

        TData_stage_2 <= TData_stage_1;
        TID_stage_2 <= TID_stage_1;

        TID_gain <= gain_array(to_integer(unsigned(TID_stage_1)));

      end if;
    end if;
  end process fetch_process;

  -------------------------------------
  -- Filter
  -------------------------------------
  filter_process : process (clk)
  begin
    if rising_edge(clk) then
      if axi_in_fwd.TValid = '1' and axi_out_bwd.TReady = '1' then

        -- Input Data
        TData_stage_3 <= TData_stage_2;
        TID_stage_3 <= TID_stage_2;

        -- Move Gain to Filter
        gain_signed <= signed(TID_gain);

      end if;
    end if;
  end process filter_process;

  -- Product
  Product_out1 <= TData_stage_3 * gain_signed;
  
  -- Saturation
  dtc_out <= X"7FFFFF" WHEN (Product_out1(50) = '0') AND (Product_out1(49 DOWNTO 46) /= "0000") ELSE
      X"800000" WHEN (Product_out1(50) = '1') AND (Product_out1(49 DOWNTO 46) /= "1111") ELSE
      Product_out1(46 DOWNTO 23);
  TData_stage_4 <= dtc_out;

  -------------------------------------
  -- Output Data
  -------------------------------------
  data_output_process : process (clk)
  begin
    if rising_edge(clk) then
      if axi_in_fwd.TValid = '1' and axi_out_bwd.TReady = '1' then

        axi_out_fwd.TData <= std_logic_vector(TData_stage_4);
        axi_out_fwd.TID   <= TID_stage_3;

      end if;
    end if;
  end process data_output_process;


  -------------------------------------
  -- Control flow
  -------------------------------------
  -- we are ready if the module behind us is ready
  axi_in_bwd.TReady <= axi_out_bwd.TReady;

  p_ctrl_flow : process (clk)
  begin
      if rising_edge(clk) then
          if axi_in_fwd.TValid = '1' and axi_out_bwd.TReady = '1' then

              if pipe_startup = 0 then
                pipe_startup <= pipe_startup;
              else
                pipe_startup <= pipe_startup - 1;
              end if;

          end if;
      end if;
  end process;


  p_valid : process (all)
  begin

      if pipe_startup = 0 then
          axi_out_fwd.TValid <= axi_in_fwd.TValid;
      else
          axi_out_fwd.TValid <= '0';
      end if;

  end process;


END rtl;