-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc/shelf_cascade/Subsystem8.vhd
-- Created: 2024-11-15 15:51:59
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem8
-- Source Path: shelf_cascade/Subsystem16/Subsystem8
-- Hierarchy Level: 2
-- Model version: 1.20
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Subsystem8 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        DataIn                            :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En23
        alpha1_a0                         :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En23
        a1                                :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En23
        a2                                :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En23
        alpha2K_not_ascii_V_2V_1_2        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En23
        K_not_ascii_V_2V_1_1              :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En23
        alpha2K_V_1                       :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En23
        Cm                                :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En23
        Enable                            :   IN    std_logic;
        DataOut                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En23
        );
END Subsystem8;


ARCHITECTURE rtl OF Subsystem8 IS

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Enable_out9                      : std_logic;
  SIGNAL alpha2K_V_1_signed               : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL Cm_signed                        : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL Product6_mul_temp                : signed(53 DOWNTO 0);  -- sfix54_En46
  SIGNAL alpha2KCm_V_1                    : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL K_not_ascii_V_2V_1_1_signed      : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Sum6_add_cast                    : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Sum6_out1                        : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL DataIn_signed                    : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL alpha1_a0_signed                 : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL Product7_mul_temp                : signed(53 DOWNTO 0);  -- sfix54_En46
  SIGNAL Product7_out1                    : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL Product1_mul_temp                : signed(58 DOWNTO 0);  -- sfix59_En46
  SIGNAL Product1_out1                    : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL Delay2_out1                      : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL alpha2K_not_ascii_V_2V_1_2_signed : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Delay1_out1                      : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL Product2_mul_temp                : signed(58 DOWNTO 0);  -- sfix59_En46
  SIGNAL Product2_out1                    : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL Sum8_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Sum8_out1                        : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Product3_mul_temp                : signed(58 DOWNTO 0);  -- sfix59_En46
  SIGNAL Product3_out1                    : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL a2_signed                        : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL Unary_Minus_cast                 : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL Unary_Minus_cast_1               : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL Unary_Minus_out1                 : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL a1_signed                        : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL Unary_Minus1_cast                : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL Unary_Minus1_cast_1              : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL Unary_Minus1_out1                : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL Product8_out1                    : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL Product4_mul_temp                : signed(53 DOWNTO 0);  -- sfix54_En46
  SIGNAL Product4_out1                    : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL Sum4_out1                        : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Delay3_out1                      : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Product8_mul_temp                : signed(58 DOWNTO 0);  -- sfix59_En46
  SIGNAL Delay4_out1                      : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL Product5_mul_temp                : signed(53 DOWNTO 0);  -- sfix54_En46
  SIGNAL Product5_out1                    : signed(26 DOWNTO 0);  -- sfix27_En23
  SIGNAL Sum2_add_cast                    : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Sum2_add_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Sum2_out1                        : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Sum1_stage2_add_cast             : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Sum1_stage2_add_temp             : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Sum1_op_stage1                   : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Sum1_stage3_add_cast             : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Sum1_stage3_add_cast_1           : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Sum1_out1                        : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Sum4_add_cast                    : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Sum4_out1_bypass                 : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Sum4_out1_last_value             : signed(31 DOWNTO 0);  -- sfix32_En23

BEGIN
  Enable_out9 <= Enable;

  enb_gated <= Enable_out9 AND enb;

  alpha2K_V_1_signed <= signed(alpha2K_V_1);

  Cm_signed <= signed(Cm);

  Product6_mul_temp <= alpha2K_V_1_signed * Cm_signed;
  alpha2KCm_V_1 <= Product6_mul_temp(49 DOWNTO 23);

  K_not_ascii_V_2V_1_1_signed <= signed(K_not_ascii_V_2V_1_1);

  Sum6_add_cast <= resize(alpha2KCm_V_1, 32);
  Sum6_out1 <= Sum6_add_cast + K_not_ascii_V_2V_1_1_signed;

  DataIn_signed <= signed(DataIn);

  alpha1_a0_signed <= signed(alpha1_a0);

  Product7_mul_temp <= DataIn_signed * alpha1_a0_signed;
  Product7_out1 <= Product7_mul_temp(49 DOWNTO 23);

  Product1_mul_temp <= Sum6_out1 * Product7_out1;
  Product1_out1 <= Product1_mul_temp(49 DOWNTO 23);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay2_out1 <= Product7_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  alpha2K_not_ascii_V_2V_1_2_signed <= signed(alpha2K_not_ascii_V_2V_1_2);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay1_out1 <= Delay2_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Product2_mul_temp <= Delay2_out1 * alpha2K_not_ascii_V_2V_1_2_signed;
  Product2_out1 <= Product2_mul_temp(49 DOWNTO 23);

  Sum8_sub_cast <= resize(alpha2KCm_V_1, 32);
  Sum8_out1 <= K_not_ascii_V_2V_1_1_signed - Sum8_sub_cast;

  Product3_mul_temp <= Delay1_out1 * Sum8_out1;
  Product3_out1 <= Product3_mul_temp(49 DOWNTO 23);

  a2_signed <= signed(a2);

  Unary_Minus_cast <= resize(a2_signed, 28);
  Unary_Minus_cast_1 <=  - (Unary_Minus_cast);
  Unary_Minus_out1 <= Unary_Minus_cast_1(26 DOWNTO 0);

  a1_signed <= signed(a1);

  Unary_Minus1_cast <= resize(a1_signed, 28);
  Unary_Minus1_cast_1 <=  - (Unary_Minus1_cast);
  Unary_Minus1_out1 <= Unary_Minus1_cast_1(26 DOWNTO 0);

  Product4_mul_temp <= Unary_Minus1_out1 * Product8_out1;
  Product4_out1 <= Product4_mul_temp(49 DOWNTO 23);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay3_out1 <= Sum4_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Product8_mul_temp <= Delay3_out1 * alpha1_a0_signed;
  Product8_out1 <= Product8_mul_temp(49 DOWNTO 23);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay4_out1 <= Product8_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Product5_mul_temp <= Delay4_out1 * Unary_Minus_out1;
  Product5_out1 <= Product5_mul_temp(49 DOWNTO 23);

  Sum2_add_cast <= resize(Product3_out1, 32);
  Sum2_add_cast_1 <= resize(Product5_out1, 32);
  Sum2_out1 <= Sum2_add_cast + Sum2_add_cast_1;

  Sum1_stage2_add_cast <= resize(Product2_out1, 32);
  Sum1_stage2_add_temp <= Sum1_stage2_add_cast + Sum2_out1;
  Sum1_op_stage1 <= resize(Sum1_stage2_add_temp, 33);

  Sum1_stage3_add_cast <= Sum1_op_stage1(31 DOWNTO 0);
  Sum1_stage3_add_cast_1 <= resize(Product4_out1, 32);
  Sum1_out1 <= Sum1_stage3_add_cast + Sum1_stage3_add_cast_1;

  Sum4_add_cast <= resize(Product1_out1, 32);
  Sum4_out1 <= Sum4_add_cast + Sum1_out1;

  DataOut_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum4_out1_last_value <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Sum4_out1_last_value <= Sum4_out1_bypass;
      END IF;
    END IF;
  END PROCESS DataOut_bypass_process;


  
  Sum4_out1_bypass <= Sum4_out1_last_value WHEN Enable_out9 = '0' ELSE
      Sum4_out1;

  DataOut <= std_logic_vector(Sum4_out1_bypass);

END rtl;

